#building tests

CC_64=x86_64-w64-mingw32-gcc
CC_32=i686-w64-mingw32-gcc

EXEC_TESTS = defender1 defender2 defender3 defender4 direct1 direct2 ntdllRefresh
sys_whis = sysWhispers2/syscalls.c sysWhispers2/syscallsstubs_x64.s 
sys_whis_patched = sysWhispers2/syscalls.c sysWhispers2/syscallsstubs_x64_patched.s 
tests: $(EXEC_TESTS)


scans: $(EXECS)
	./tests/scan.sh ./tests/libkitty.exe
	#./tests/scan.sh ./tests/syswhis.exe

direct1:
	$(CC_64) direct1.c $(sys_whis) -lpsapi -o direct1.exe $(CFLAGS) 
	./scan.sh ./direct1.exe 

direct2:
	$(CC_64) direct2.c $(sys_whis_patched) -lpsapi -o direct2.exe $(CFLAGS) 
	./scan.sh ./direct2.exe 

defender1:
	$(CC_64) defender1.c -o defender1.exe -lpsapi 
	./scan.sh ./defender1.exe 

defender2:
	$(CC_64) defender2.c -O2 -o defender2.exe -lpsapi 
	./scan.sh ./defender2.exe 

defender3:
	$(CC_64) defender2.c -O0 -o defender3.exe -lpsapi 
	./scan.sh ./defender3.exe f

defender4:
	$(CC_64) defender4.c -o defender4.exe -lpsapi 
	./scan.sh ./defender4.exe 

hollowing:
	i686-w64-mingw32-g++ hollowChild.cpp -o hollowChild.exe -lpsapi -lntdll -static -static-libgcc -static-libstdc++
	i686-w64-mingw32-g++ hollowing.cpp -o hollowing.exe -lpsapi -lntdll -static -static-libgcc -static-libstdc++

hookbypass:
	$(CC_64) hookbypass.c $(sys_whis_patched) -lpsapi  -o evil.exe
	
injector:
	x86_64-w64-mingw32-g++ injector.c -O0 -o injector.exe -lpsapi -fpermissive -static -static-libgcc -static-libstdc++
	

clean:
	rm $(lib_obj) $(libkitty) $(EXEC_TESTS) *.exe